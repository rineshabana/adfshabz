{
	"name": "NewBranchdataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeDataSet",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "DeprtamentdataSet",
						"type": "DatasetReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputdataSet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "OutputdataSet",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregateOnDept"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> Employees",
				"source(output(",
				"          deptid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Department",
				"Employees aggregate(groupBy(department),",
				"     TotalEmployees = count(empid),",
				"     partitionBy('hash', 1)) ~> aggregateOnDept",
				"Employees, Department join(department == deptid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregateOnDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['AggregatebyEmp.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          department,",
				"          TotalEmployees",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['EmpDept.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          country,",
				"          deptid,",
				"          depname",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}